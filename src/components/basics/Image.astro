---
import { getImage } from 'astro:assets';
import type { UnresolvedImageTransform } from 'astro';
import { tm } from '../../utils/tailwind';

export type Props = Omit<UnresolvedImageTransform, 'src'> & {
    src:
        | UnresolvedImageTransform['src']
        | {
              light: UnresolvedImageTransform['src'];
              dark: UnresolvedImageTransform['src'];
          };
	width?: number | string;
	height?: number | string;
};

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
    throw new Error('Image components must specify an `alt` attribute.');
}

const toFetch =
    typeof props.src !== 'string' && 'light' in props.src && 'dark' in props.src
        ? ([
              { ...props, src: props.src.light },
              { ...props, src: props.src.dark },
          ] as UnresolvedImageTransform[])
        : ([props] as UnresolvedImageTransform[]);

const srcs = await Promise.all(toFetch.map(getImage)).then((res) =>
    res.map((res) => {
        res.attributes.class = undefined;
        return res;
    })
);

const devDataImageComponent = import.meta.env.DEV
    ? { 'data-image-component': true }
    : {};

let aspectRatio: number | undefined;

function targetsImgElement(c: string) {
    const imgClassPrefixes = ['object', 'rounded'];
    const core = c.split(':').at(-1)?.split('!').at(-1) ?? '';
    return !!imgClassPrefixes.find((p) => core.startsWith(`${p}-`));
}

const classes = {
    picture: (props.class as string)
        ?.split(' ')
        .filter((c) => !targetsImgElement(c))
        .join(' '),
    img: (props.class as string)
        ?.split(' ')
        .filter((c) => targetsImgElement(c))
        .join(' '),
};
---

{srcs.length == 1 ? (
    <img src={srcs[0].src} srcset={srcs[0].srcSet.attribute} {...srcs[0].attributes} width={props.width} height={props.height} {...devDataImageComponent} class={props.class} />
) : (
    <picture {...devDataImageComponent} class={props.class} style={{ aspectRatio }} class={classes.picture}>
        <source srcset={srcs[1].srcSet.attribute || srcs[1].src} {...{...srcs[1].attributes, class: undefined, className: undefined }} media="(prefers-color-scheme: dark)" />
        <img src={srcs[0].src} width={props.width} height={props.height} srcset={srcs[0].srcSet.attribute || undefined} {...srcs[0].attributes} class={tm("max-h-full max-w-full h-full w-full", classes.img)} />
    </picture>
)}
